{"version":3,"sources":["sections/HeaderSection/HeaderSection.js","sections/NavBar/NavBar.js","sections/HomeSection/HomeSection.js","sections/AboutSection/AboutSection.js","sections/ExperienceSection/ExperienceSection.js","App.js","serviceWorker.js","index.js"],"names":["HeaderSection","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toogleNavBar","navBar","document","querySelector","classList","toggle","changeColor","listBars","querySelectorAll","num","state","listOfColor","length","setState","colorCounter","forEach","bar","style","background","_this2","inverval","setInterval","_this3","react_default","a","createElement","className","onClick","Component","NavBar","handleClick","id","fullID","section","console","log","scrollIntoView","sections","listOfSections","map","name","toUpperCase","HomeSection","AboutSection","ExperienceSection","sectionList","App","sections_HeaderSection_HeaderSection","sections_NavBar_NavBar","sections_HomeSection_HomeSection","sections_AboutSection_AboutSection","sections_ExperienceSection_ExperienceSection","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.842c69e3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './HeaderSection.css';\r\n\r\nclass HeaderSection extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={ \r\n            colorCounter: 0,\r\n            listOfColor:[\r\n                \"#000000\",\r\n                \"#ffffff\"\r\n            ]\r\n        };\r\n    }\r\n    toogleNavBar = () => {\r\n        const navBar = document.querySelector(\".js-nav-bar-section\");\r\n        if (navBar==null) return;\r\n        navBar.classList.toggle(\"nav-bar-section--closing\");\r\n    }\r\n    changeColor = () =>{\r\n        const listBars = document.querySelectorAll(\".js-bar\");\r\n        let num=this.state.listOfColor.length;\r\n        this.setState(state=>({colorCounter: (state.colorCounter+1)%num}));\r\n        if (listBars.length!==4) return;\r\n        listBars.forEach((bar)=>{\r\n            bar.style.background=this.state.listOfColor[this.state.colorCounter];\r\n        });\r\n    };\r\n    componentDidMount(){\r\n        this.inverval=setInterval(()=>this.changeColor(),2000);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"header-section\">\r\n                <div onClick={()=>{this.toogleNavBar()}} className=\"header-section__nav-toogle\">\r\n                    <div className=\"bar1 js-bar\"></div>\r\n                    <div className=\"bar2 js-bar\"></div>\r\n                    <div className=\"bar3 js-bar\"></div>\r\n                    <div className=\"bar4 js-bar\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HeaderSection;","import React, {Component} from 'react';\r\nimport './NavBar.css';\r\n \r\n\r\nclass NavBar extends Component{\r\n    toogleNavBar = () => {\r\n        const navBar = document.querySelector(\".js-nav-bar-section\");\r\n        if (navBar==null) return;\r\n        navBar.classList.toggle(\"nav-bar-section--closing\");\r\n    }\r\n    handleClick = (id) =>{\r\n        const fullID= \".js-\"+id+\"-section\";\r\n        const section = document.querySelector(fullID);\r\n        console.log(fullID);\r\n        console.log(section);\r\n        if (section!= null)\r\n            section.scrollIntoView();\r\n        this.toogleNavBar();\r\n    }\r\n    sections=this.props.listOfSections.map(\r\n        (section) =>{\r\n            return(\r\n            <nav onClick={()=>{this.handleClick(section.name)}}>\r\n                {section.name.toUpperCase()}\r\n  \r\n            </nav>\r\n            \r\n            )\r\n        }\r\n    );\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"nav-bar-section nav-bar-section--closing js-nav-bar-section\">\r\n                <div className=\"nav-bar-section__navbar\">\r\n                    {this.sections}\r\n                </div>\r\n                <div onClick={()=>{this.toogleNavBar()}} className=\"nav-bar-section__non-navbar\">\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default NavBar;","import React, {Component} from 'react';\r\nimport './HomeSection.css';\r\n\r\nclass HomeSection extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"home-section js-home-section\">\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HomeSection;","import React, {Component} from 'react';\r\nimport './AboutSection.css';\r\nclass AboutSection extends Component{\r\n    render(){\r\n        return(<div className=\"about-section js-about-section\">\r\n            \r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default AboutSection;","import React, {Component} from 'react';\r\nimport './ExperienceSection.css';\r\nclass ExperienceSection extends Component{\r\n    render(){\r\n        return(<div className=\"experience-section js-experience-section\">\r\n\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default ExperienceSection;","import React, { Component } from 'react';\n\n//insert Sections.\nimport HeaderSection from './sections/HeaderSection/HeaderSection';\nimport NavBar from './sections/NavBar/NavBar';\nimport HomeSection from './sections/HomeSection/HomeSection';\nimport AboutSection from './sections/AboutSection/AboutSection';\nimport ExperienceSection from './sections/ExperienceSection/ExperienceSection';\n//~~~\nimport './App.css';\nconst sectionList = [\n  {id:\"0\",name:\"home\"},\n  {id:\"1\",name:\"about\"},\n  {id:\"2\",name:\"experience\"}\n];\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HeaderSection/>\n        <NavBar listOfSections={sectionList}/>  \n        <HomeSection/>\n        <AboutSection/>\n        <ExperienceSection/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}